{"version":3,"sources":["../../src/datasource.js"],"names":["AtlasDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","atlasFormat","minimumInterval","query","datasourceRequest","replaceWithText","method","headers","then","mapToTextValue","options","data","result","_","map","d","text","value","target","tag","queries","_this","_scopeTags","variables","targets","forEach","hide","rawQuery","rawQueryInput","rawQueryParts","push","replace","scopedVars","alias","legend","join","groupBys","filter","groupBy","length","queryParts","hasPushAggregation","hasPushMath","tags","logicals","i","len","aTag","valueReplaced","includes","multipleValues","split","matcher","notCondition","logical","mvIndex","mvLen","math","aggregation","concat","reverse","aliasLegend","legendSuffixValue","fullQuery","params","s","range","from","valueOf","e","to","format","httpOptions","inspect","deferred","defer","response","status","console","log","error","Error","reject","responseError","resolve","convertToTimeseries","message","promise","timeseriesData","index","series","datapoints","indexOf","allIsNull","values","notAllZero","notAllNull","timestamp","start","step","undefined","allIsZero","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport dateMath from \"app/core/utils/datemath\";\nimport kbn from \"app/core/utils/kbn\";\n\nexport class AtlasDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.atlasFormat = instanceSettings.atlasFormat || 'std.json';\n        this.minimumInterval = instanceSettings.minimumInterval || 1000;\n    }\n\n    // Required for templating\n    metricFindQuery(query) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/' + (query ? this.templateSrv.replaceWithText(query) : 'name'),\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    metricFind(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/name',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d) => {\n            return {\n                text: d,\n                value: d\n            };\n        });\n    }\n\n    metricFindDimensions(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags?q=name,' + options.target + ',:eq',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    dimensionFindValues(options, tag) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/' + tag,\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    query(options) {\n        var queries = [];\n        var _this = this;\n        var _scopeTags = _this.templateSrv.variables;\n        options.targets.forEach(function(target) {\n            if (target.hide || !(target.rawQuery || target.target)) {\n                return;\n            }\n            if (target.rawQueryInput) {\n                if (!target.rawQuery) {\n                    return;\n                }\n                var rawQueryParts = [];\n                rawQueryParts.push(_this.templateSrv.replace(target.rawQuery, options.scopedVars));\n                if (target.alias) {\n                    var legend = target.alias;\n                    rawQueryParts.push(legend);\n                    rawQueryParts.push(':legend');\n                }\n                queries.push(rawQueryParts.join(','));\n            } else {\n                if (!target.target) {\n                    return;\n                }\n                if (target.groupBys) {\n                    target.groupBys = target.groupBys.filter(function(groupBy) {\n                        return groupBy.name && groupBy.name.length > 0;\n                    });\n                }\n                var queryParts = [];\n                queryParts.push(\"name,\" + target.target + \",:eq\");\n                /* Commented out as we don't use this and this often causes \"No data\"\n                if (_scopeTags) {\n                    for (var i = 0; i < _scopeTags.length; i++) {\n                        if (_scopeTags[i].current.text != 'All') {\n                            queryParts.push(_scopeTags[i].name + \",\" + _scopeTags[i].current.text + \",:eq,:and\");\n                        }\n                    }\n                }\n                */\n                var hasPushAggregation = false;\n                var hasPushMath = false;\n                if (target.tags) {\n                    var logicals = [];\n                    for (var i = 0, len = target.tags.length; i < len; i++) {\n                        var aTag = target.tags[i];\n                        var valueReplaced = _this.templateSrv.replace(aTag.value);\n                        // the replaced value for templates will be a comma separated list\n                        if (valueReplaced.includes(',')) {\n                            // len = valueReplaced.length;\n                            valueReplaced = valueReplaced.replace('{', '');\n                            valueReplaced = valueReplaced.replace('}', '');\n                            var multipleValues = valueReplaced.split(',');\n                            if (\"in\" === aTag.matcher) {\n                                //if (target.aggregation) {\n                                //    queryParts.push(\":\" + target.aggregation);\n                                //}\n                                queryParts.push(aTag.name);\n                                queryParts.push(\"(\");\n                                queryParts.push(valueReplaced);\n                                queryParts.push(\")\");\n                                queryParts.push(\":in\");\n                                if (\"not\" === aTag.notCondition) {\n                                    queryParts.push(\":not\");\n                                }\n                                logicals.push(\":\" + aTag.logical);\n                            } else {\n                                for (var mvIndex = 0, mvLen = multipleValues.length; mvIndex < mvLen; mvIndex++) {\n                                    // queryParts.push(aTag.name);\n\n                                    queryParts.push(aTag.name);\n                                    queryParts.push(multipleValues[mvIndex]);\n                                    queryParts.push(\":\" + aTag.matcher);\n                                    if (\"not\" === aTag.notCondition) {\n                                        queryParts.push(\":not\");\n                                    }\n                                    logicals.push(\":\" + aTag.logical);\n                                }\n                            }\n                        } else {\n                            // queryParts.push(aTag.name);\n                            if (\"in\" === aTag.matcher) {\n                                // no logicals associated with this matcher\n\n                                if (target.math) {\n                                    hasPushMath = true;\n                                    queryParts.push(\":\" + target.math);\n                                }\n                                // legend must come before this matcher\n                                // aggregation must come before this matcher, so the name must be pushed after\n                                if (target.aggregation) {\n                                    hasPushAggregation = true;\n                                    queryParts.push(\":\" + target.aggregation);\n                                }\n                                queryParts.push(aTag.name);\n                                queryParts.push(\"(\");\n                                queryParts.push(valueReplaced);\n                                queryParts.push(\")\");\n                                queryParts.push(\":in\");\n                            }\n                            else {\n                                queryParts.push(aTag.name);\n                                queryParts.push(valueReplaced);\n                                queryParts.push(\":\" + aTag.matcher);\n                            }\n                            if (\"not\" === aTag.notCondition) {\n                                queryParts.push(\":not\");\n                            }\n                            if (\"in\" === aTag.matcher) {\n                                // logicals go before \"in\"\n                            } else {\n                                logicals.push(\":\" + aTag.logical);\n                            }\n                        }\n                    }\n                    queryParts = queryParts.concat(logicals.reverse());\n                }\n                if (target.aggregation && !hasPushAggregation) {\n                    queryParts.push(\":\" + target.aggregation);\n                }\n                if (target.math && !hasPushMath) {\n                    queryParts.push(\":\" + target.math);\n                }\n                if (target.groupBys && target.groupBys.length > 0) {\n                    queryParts.push(\"(\");\n                    target.groupBys.forEach(function(groupBy) {\n                        queryParts.push(groupBy.name);\n                    });\n                    queryParts.push(\")\");\n                    queryParts.push(\":by\");\n                }\n\n                if (target.alias) {\n                    var aliasLegend = target.alias;\n                    if (target.groupBys && target.groupBys.length > 0) {\n                        var legendSuffixValue = _.map(target.groupBys,\n                                function(groupBy) {\n                                    return ' $' + groupBy.name;\n                                })\n                            .join(' ');\n                        aliasLegend += ' ' + legendSuffixValue;\n                    }\n                    queryParts.push(aliasLegend);\n                    queryParts.push(':legend');\n                }\n\n                queries.push(queryParts.join(','));\n            }\n        });\n        // Atlas can take multiple concatenated stack queries\n        var fullQuery = queries.join(',');\n\n        /*\n        var interval = options.interval;\n        if (kbn.interval_to_ms(interval) < this.minimumInterval) {\n            // console.log(\"Detected interval smaller than allowed: \" + interval);\n            interval = kbn.secondsToHms(this.minimumInterval / 1000);\n            // console.log(\"New Interval: \" + interval);\n        }\n        */\n\n        /*\n                var params = {\n                    q: fullQuery,\n                    step: interval,\n                    s: options.rangeRaw.from,\n                    e: options.rangeRaw.to,\n                    format: this.atlasFormat\n                };\n        */\n\n        var params = {\n            q: fullQuery,\n            // step: interval,\n            s: options.range.from.valueOf(),\n            e: options.range.to.valueOf(),\n            format: this.atlasFormat\n        };\n\n        var httpOptions = {\n            method: 'GET',\n            url: this.url + '/api/v1/graph',\n            params: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            inspect: {\n                type: 'atlas'\n            }\n        };\n        // console.log(\"before defer\");\n        var deferred = this.q.defer();\n        // var _this = this;\n        this.backendSrv.datasourceRequest(httpOptions)\n            .then(function(response) {\n                if (response.status !== 200) {\n                    console.log(\"error...\");\n                    var error = new Error(\"Bad Status: \" + response.status);\n                    deferred.reject(error);\n                }\n                if (!response.data) {\n                    var responseError = new Error(\"No data\");\n                    deferred.reject(responseError);\n                }\n                deferred.resolve(_this.convertToTimeseries(response.data));\n            }, function(response) {\n                console.error('Unable to load data. Response: %o', response.data ? response.data.message : response);\n                var error = new Error(\"Unable to load data\");\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    }\n\n    convertToTimeseries(result) {\n        // console.log(\"inside convertToTimeseries\");\n        var timeseriesData = _.map(result.legend, function(legend, index) {\n            var series = {\n                target: legend,\n                datapoints: []\n            };\n            if (legend.indexOf('NO DATA') > 0 || legend.indexOf('NO_DATA') > 0) {\n                series.allIsNull = true;\n                return series;\n            }\n\n            var values = _.map(result.values, index);\n\n            var notAllZero = false;\n            var notAllNull = false;\n            for (var i = 0; i < values.length; i++) {\n                var value = values[i];\n                var timestamp = result.start + (i * result.step);\n                series.datapoints.push([(value === \"NaN\") ? null : value, timestamp]);\n                notAllZero = notAllZero || value !== 0;\n                notAllNull = notAllNull || (value !== \"NaN\" && value !== undefined);\n            }\n            //hide zero and null results\n            series.allIsZero = !notAllZero;\n            series.allIsNull = !notAllNull;\n            return series;\n        });\n        return {\n            data: timeseriesData\n        };\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                };\n            }\n        });\n    }\n}\n"]}