{"version":3,"sources":["../../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport dateMath from \"app/core/utils/datemath\";\nimport kbn from \"app/core/utils/kbn\";\n\nexport class AtlasDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.atlasFormat = instanceSettings.atlasFormat || 'std.json';\n        this.minimumInterval = instanceSettings.minimumInterval || 1000;\n    }\n\n    // Required for templating\n    metricFindQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/name',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return {\n                text: d,\n                value: i\n            };\n        });\n    }\n\n    metricFindDimensions(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags?q=name,' + options.target + ',:eq',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    dimensionFindValues(options, tag) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/' + tag,\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    query(options) {\n        var queries = [];\n        var _this = this;\n        options.targets.forEach(function(target) {\n            if (target.hide || !(target.rawQuery || target.target)) {\n                return;\n            }\n            if (target.rawQueryInput) {\n                if (!target.rawQuery) {\n                    return;\n                }\n                var rawQueryParts = [];\n                rawQueryParts.push(target.rawQuery);\n                if (target.alias) {\n                    var legend = target.alias;\n                    rawQueryParts.push(legend);\n                    rawQueryParts.push(':legend');\n                }\n                queries.push(rawQueryParts.join(','));\n            } else {\n                if (!target.target) {\n                    return;\n                }\n                if (target.groupBys) {\n                    target.groupBys = target.groupBys.filter(function(groupBy) {\n                        return groupBy.name && groupBy.name.length > 0;\n                    });\n                }\n                var queryParts = [];\n                queryParts.push(\"name,\" + target.target + \",:eq\");\n                if (target.tags) {\n                    var logicals = [];\n                    for (var i = 0, len = target.tags.length; i < len; i++) {\n                      var aTag = target.tags[i];\n                      var valueReplaced = _this.templateSrv.replace(aTag.value);\n                      // the replaced value for templates will be a comma separated list\n                      if (valueReplaced.includes(',')) {\n                          len = valueReplaced.length;\n                          valueReplaced = valueReplaced.replace('{','');\n                          valueReplaced = valueReplaced.replace('}','');\n                          var multipleValues = valueReplaced.split(',');\n                          for (var mvIndex = 0, mvLen = multipleValues.length; mvIndex < mvLen; mvIndex++) {\n                            // queryParts.push(aTag.name);\n                            if (\"xxxin\" === aTag.matcher) {\n                              //if (target.aggregation) {\n                              //    queryParts.push(\":\" + target.aggregation);\n                              //}\n                              queryParts.push(aTag.name);\n                              queryParts.push(\"(\");\n                              queryParts.push(multipleValues[mvIndex]);\n                              queryParts.push(\")\");\n                              queryParts.push(\":in\");\n                            }\n                            else {\n                              queryParts.push(aTag.name);\n                              queryParts.push(multipleValues[mvIndex]);\n                              queryParts.push(\":\" + aTag.matcher);\n                            }\n                            if (\"not\" === aTag.notCondition) {\n                                queryParts.push(\":not\");\n                            }\n                            logicals.push(\":\" + aTag.logical);\n                          }\n                      } else {\n                        // queryParts.push(aTag.name);\n                        if (\"in\" === aTag.matcher) {\n                          // no logicals associated with this matcher\n\n                          // legend must come before this matcher\n                          // aggregation must come before this matcher, so the name must be pushed after\n                          if (target.aggregation) {\n                              queryParts.push(\":\" + target.aggregation);\n                          }\n                          queryParts.push(aTag.name);\n                          queryParts.push(\"(\");\n                          queryParts.push(valueReplaced);\n                          queryParts.push(\")\");\n                          queryParts.push(\":in\");\n                        }\n                        else {\n                          queryParts.push(aTag.name);\n                          queryParts.push(valueReplaced);\n                          queryParts.push(\":\" + aTag.matcher);\n                        }\n                        if (\"not\" === aTag.notCondition) {\n                            queryParts.push(\":not\");\n                        }\n                        if (\"in\" === aTag.matcher) {\n                           // logicals go before \"in\"\n                        } else {\n                          logicals.push(\":\" + aTag.logical);\n                        }\n                      }\n                    }\n                    queryParts = queryParts.concat(logicals.reverse());\n                }\n                //if (target.aggregation) {\n                //    queryParts.push(\":\" + target.aggregation);\n                //}\n                if (target.groupBys && target.groupBys.length > 0) {\n                    queryParts.push(\"(\");\n                    target.groupBys.forEach(function(groupBy) {\n                        queryParts.push(groupBy.name);\n                    });\n                    queryParts.push(\")\");\n                    queryParts.push(\":by\");\n                }\n\n                if (target.alias) {\n                    var aliasLegend = target.alias;\n                    if (target.groupBys && target.groupBys.length > 0) {\n                        var legendSuffixValue = _.map(target.groupBys,\n                                function(groupBy) {\n                                    return ' $' + groupBy.name;\n                                })\n                            .join(' ');\n                        aliasLegend += ' ' + legendSuffixValue;\n                    }\n                    queryParts.push(aliasLegend);\n                    queryParts.push(':legend');\n                }\n\n                queries.push(queryParts.join(','));\n            }\n        });\n        // Atlas can take multiple concatenated stack queries\n        var fullQuery = queries.join(',');\n\n        var interval = options.interval;\n        if (kbn.interval_to_ms(interval) < this.minimumInterval) {\n            // console.log(\"Detected interval smaller than allowed: \" + interval);\n            interval = kbn.secondsToHms(this.minimumInterval / 1000);\n            // console.log(\"New Interval: \" + interval);\n        }\n\n        /*\n                var params = {\n                    q: fullQuery,\n                    step: interval,\n                    s: options.rangeRaw.from,\n                    e: options.rangeRaw.to,\n                    format: this.atlasFormat\n                };\n        */\n\n        var params = {\n            q: fullQuery,\n            step: interval,\n            s: options.range.from.valueOf(),\n            e: options.range.to.valueOf(),\n            format: this.atlasFormat\n        };\n\n        var httpOptions = {\n            method: 'GET',\n            url: this.url + '/api/v1/graph',\n            params: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            inspect: {\n                type: 'atlas'\n            }\n        };\n        // console.log(\"before defer\");\n        var deferred = this.q.defer();\n        // var _this = this;\n        this.backendSrv.datasourceRequest(httpOptions)\n            .then(function(response) {\n                if (response.status !== 200) {\n                    console.log(\"error...\");\n                    var error = new Error(\"Bad Status: \" + response.status);\n                    deferred.reject(error);\n                }\n                if (!response.data) {\n                    var responseError = new Error(\"No data\");\n                    deferred.reject(responseError);\n                }\n                deferred.resolve(_this.convertToTimeseries(response.data));\n            }, function(response) {\n                console.error('Unable to load data. Response: %o', response.data ? response.data.message : response);\n                var error = new Error(\"Unable to load data\");\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    }\n\n    convertToTimeseries(result) {\n        // console.log(\"inside convertToTimeseries\");\n        var timeseriesData = _.map(result.legend, function(legend, index) {\n            var series = {\n                target: legend,\n                datapoints: []\n            };\n            if (legend.indexOf('NO DATA') > 0 || legend.indexOf('NO_DATA') > 0) {\n                series.allIsNull = true;\n                return series;\n            }\n\n            var values = _.pluck(result.values, index);\n\n            var notAllZero = false;\n            var notAllNull = false;\n            for (var i = 0; i < values.length; i++) {\n                var value = values[i];\n                var timestamp = result.start + (i * result.step);\n                series.datapoints.push([value, timestamp]);\n                notAllZero = notAllZero || value !== 0;\n                notAllNull = notAllNull || (value !== \"NaN\" && value !== undefined);\n            }\n            //hide zero and null results\n            series.allIsZero = !notAllZero;\n            series.allIsNull = !notAllNull;\n            return series;\n        });\n        return {\n            data: timeseriesData\n        };\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                };\n            }\n        });\n    }\n}\n"]}