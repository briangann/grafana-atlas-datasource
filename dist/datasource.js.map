{"version":3,"sources":["../src/datasource.js"],"names":["angular","_","dateMath","kbn","AtlasDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","atlasFormat","minimumInterval","query","datasourceRequest","replaceWithText","method","headers","then","mapToTextValue","options","data","result","map","d","text","value","target","tag","queries","_this","_scopeTags","variables","targets","forEach","hide","rawQuery","rawQueryInput","rawQueryParts","push","replace","scopedVars","alias","legend","join","groupBys","filter","groupBy","length","queryParts","hasPushAggregation","hasPushMath","tags","logicals","i","len","aTag","valueReplaced","includes","multipleValues","split","matcher","notCondition","logical","mvIndex","mvLen","math","aggregation","concat","reverse","aliasLegend","legendSuffixValue","fullQuery","params","s","range","from","valueOf","e","to","format","httpOptions","inspect","deferred","defer","response","status","console","log","error","Error","reject","responseError","resolve","convertToTimeseries","message","promise","timeseriesData","index","series","datapoints","indexOf","allIsNull","values","notAllZero","notAllNull","timestamp","start","step","undefined","allIsZero","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport dateMath from \"app/core/utils/datemath\";\nimport kbn from \"app/core/utils/kbn\";\n\nexport class AtlasDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.atlasFormat = instanceSettings.atlasFormat || 'std.json';\n        this.minimumInterval = instanceSettings.minimumInterval || 1000;\n    }\n\n    // Required for templating\n    metricFindQuery(query) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/' + (query ? this.templateSrv.replaceWithText(query) : 'name'),\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    metricFind(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/name',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d) => {\n            return {\n                text: d,\n                value: d\n            };\n        });\n    }\n\n    metricFindDimensions(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags?q=name,' + options.target + ',:eq',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    dimensionFindValues(options, tag) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/' + tag,\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    query(options) {\n        var queries = [];\n        var _this = this;\n        var _scopeTags = _this.templateSrv.variables;\n        options.targets.forEach(function(target) {\n            if (target.hide || !(target.rawQuery || target.target)) {\n                return;\n            }\n            if (target.rawQueryInput) {\n                if (!target.rawQuery) {\n                    return;\n                }\n                var rawQueryParts = [];\n                rawQueryParts.push(_this.templateSrv.replace(target.rawQuery, options.scopedVars));\n                if (target.alias) {\n                    var legend = target.alias;\n                    rawQueryParts.push(legend);\n                    rawQueryParts.push(':legend');\n                }\n                queries.push(rawQueryParts.join(','));\n            } else {\n                if (!target.target) {\n                    return;\n                }\n                if (target.groupBys) {\n                    target.groupBys = target.groupBys.filter(function(groupBy) {\n                        return groupBy.name && groupBy.name.length > 0;\n                    });\n                }\n                var queryParts = [];\n                queryParts.push(\"name,\" + target.target + \",:eq\");\n                /* Commented out as we don't use this and this often causes \"No data\"\n                if (_scopeTags) {\n                    for (var i = 0; i < _scopeTags.length; i++) {\n                        if (_scopeTags[i].current.text != 'All') {\n                            queryParts.push(_scopeTags[i].name + \",\" + _scopeTags[i].current.text + \",:eq,:and\");\n                        }\n                    }\n                }\n                */\n                var hasPushAggregation = false;\n                var hasPushMath = false;\n                if (target.tags) {\n                    var logicals = [];\n                    for (var i = 0, len = target.tags.length; i < len; i++) {\n                        var aTag = target.tags[i];\n                        var valueReplaced = _this.templateSrv.replace(aTag.value);\n                        // the replaced value for templates will be a comma separated list\n                        if (valueReplaced.includes(',')) {\n                            // len = valueReplaced.length;\n                            valueReplaced = valueReplaced.replace('{', '');\n                            valueReplaced = valueReplaced.replace('}', '');\n                            var multipleValues = valueReplaced.split(',');\n                            if (\"in\" === aTag.matcher) {\n                                //if (target.aggregation) {\n                                //    queryParts.push(\":\" + target.aggregation);\n                                //}\n                                queryParts.push(aTag.name);\n                                queryParts.push(\"(\");\n                                queryParts.push(valueReplaced);\n                                queryParts.push(\")\");\n                                queryParts.push(\":in\");\n                                if (\"not\" === aTag.notCondition) {\n                                    queryParts.push(\":not\");\n                                }\n                                logicals.push(\":\" + aTag.logical);\n                            } else {\n                                for (var mvIndex = 0, mvLen = multipleValues.length; mvIndex < mvLen; mvIndex++) {\n                                    // queryParts.push(aTag.name);\n\n                                    queryParts.push(aTag.name);\n                                    queryParts.push(multipleValues[mvIndex]);\n                                    queryParts.push(\":\" + aTag.matcher);\n                                    if (\"not\" === aTag.notCondition) {\n                                        queryParts.push(\":not\");\n                                    }\n                                    logicals.push(\":\" + aTag.logical);\n                                }\n                            }\n                        } else {\n                            // queryParts.push(aTag.name);\n                            if (\"in\" === aTag.matcher) {\n                                // no logicals associated with this matcher\n\n                                if (target.math) {\n                                    hasPushMath = true;\n                                    queryParts.push(\":\" + target.math);\n                                }\n                                // legend must come before this matcher\n                                // aggregation must come before this matcher, so the name must be pushed after\n                                if (target.aggregation) {\n                                    hasPushAggregation = true;\n                                    queryParts.push(\":\" + target.aggregation);\n                                }\n                                queryParts.push(aTag.name);\n                                queryParts.push(\"(\");\n                                queryParts.push(valueReplaced);\n                                queryParts.push(\")\");\n                                queryParts.push(\":in\");\n                            }\n                            else {\n                                queryParts.push(aTag.name);\n                                queryParts.push(valueReplaced);\n                                queryParts.push(\":\" + aTag.matcher);\n                            }\n                            if (\"not\" === aTag.notCondition) {\n                                queryParts.push(\":not\");\n                            }\n                            if (\"in\" === aTag.matcher) {\n                                // logicals go before \"in\"\n                            } else {\n                                logicals.push(\":\" + aTag.logical);\n                            }\n                        }\n                    }\n                    queryParts = queryParts.concat(logicals.reverse());\n                }\n                if (target.aggregation && !hasPushAggregation) {\n                    queryParts.push(\":\" + target.aggregation);\n                }\n                if (target.math && !hasPushMath) {\n                    queryParts.push(\":\" + target.math);\n                }\n                if (target.groupBys && target.groupBys.length > 0) {\n                    queryParts.push(\"(\");\n                    target.groupBys.forEach(function(groupBy) {\n                        queryParts.push(groupBy.name);\n                    });\n                    queryParts.push(\")\");\n                    queryParts.push(\":by\");\n                }\n\n                if (target.alias) {\n                    var aliasLegend = target.alias;\n                    if (target.groupBys && target.groupBys.length > 0) {\n                        var legendSuffixValue = _.map(target.groupBys,\n                                function(groupBy) {\n                                    return ' $' + groupBy.name;\n                                })\n                            .join(' ');\n                        aliasLegend += ' ' + legendSuffixValue;\n                    }\n                    queryParts.push(aliasLegend);\n                    queryParts.push(':legend');\n                }\n\n                queries.push(queryParts.join(','));\n            }\n        });\n        // Atlas can take multiple concatenated stack queries\n        var fullQuery = queries.join(',');\n\n        /*\n        var interval = options.interval;\n        if (kbn.interval_to_ms(interval) < this.minimumInterval) {\n            // console.log(\"Detected interval smaller than allowed: \" + interval);\n            interval = kbn.secondsToHms(this.minimumInterval / 1000);\n            // console.log(\"New Interval: \" + interval);\n        }\n        */\n\n        /*\n                var params = {\n                    q: fullQuery,\n                    step: interval,\n                    s: options.rangeRaw.from,\n                    e: options.rangeRaw.to,\n                    format: this.atlasFormat\n                };\n        */\n\n        var params = {\n            q: fullQuery,\n            // step: interval,\n            s: options.range.from.valueOf(),\n            e: options.range.to.valueOf(),\n            format: this.atlasFormat\n        };\n\n        var httpOptions = {\n            method: 'GET',\n            url: this.url + '/api/v1/graph',\n            params: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            inspect: {\n                type: 'atlas'\n            }\n        };\n        // console.log(\"before defer\");\n        var deferred = this.q.defer();\n        // var _this = this;\n        this.backendSrv.datasourceRequest(httpOptions)\n            .then(function(response) {\n                if (response.status !== 200) {\n                    console.log(\"error...\");\n                    var error = new Error(\"Bad Status: \" + response.status);\n                    deferred.reject(error);\n                }\n                if (!response.data) {\n                    var responseError = new Error(\"No data\");\n                    deferred.reject(responseError);\n                }\n                deferred.resolve(_this.convertToTimeseries(response.data));\n            }, function(response) {\n                console.error('Unable to load data. Response: %o', response.data ? response.data.message : response);\n                var error = new Error(\"Unable to load data\");\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    }\n\n    convertToTimeseries(result) {\n        // console.log(\"inside convertToTimeseries\");\n        var timeseriesData = _.map(result.legend, function(legend, index) {\n            var series = {\n                target: legend,\n                datapoints: []\n            };\n            if (legend.indexOf('NO DATA') > 0 || legend.indexOf('NO_DATA') > 0) {\n                series.allIsNull = true;\n                return series;\n            }\n\n            var values = _.map(result.values, index);\n\n            var notAllZero = false;\n            var notAllNull = false;\n            for (var i = 0; i < values.length; i++) {\n                var value = values[i];\n                var timestamp = result.start + (i * result.step);\n                series.datapoints.push([(value === \"NaN\") ? null : value, timestamp]);\n                notAllZero = notAllZero || value !== 0;\n                notAllNull = notAllNull || (value !== \"NaN\" && value !== undefined);\n            }\n            //hide zero and null results\n            series.allIsZero = !notAllZero;\n            series.allIsNull = !notAllNull;\n            return series;\n        });\n        return {\n            data: timeseriesData\n        };\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                };\n            }\n        });\n    }\n}\n"]}