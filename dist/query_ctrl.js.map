{"version":3,"sources":["../src/query_ctrl.js"],"names":[],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class AtlasDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.templateSrv = templateSrv;\n        this.target.target = this.target.target || 'select metric';\n        this.scope.atlas = {};\n        this.scope.atlas.aggregations = [\n            \"sum\",\n            \"avg\",\n            \"count\",\n            \"max\",\n            \"min\",\n            \"cf-avg\",\n            \"cf-max\",\n            \"cf-min\",\n            \"cf-sum\"\n        ];\n        this.scope.atlas.logical = [\n            \"and\",\n            \"or\"\n        ];\n        this.scope.atlas.notCondition = [\n            \" \",\n            \"not\"\n        ];\n        this.scope.atlas.matchers = [\n            \"eq\",\n            \"ge\",\n            \"gt\",\n            \"le\",\n            \"lt\",\n            \"has\",\n            \"in\",\n            \"re\",\n            \"reic\"\n        ];\n    }\n\n    getOptions() {\n        return this.datasource.metricFindQuery(this.target)\n            .then(this.uiSegmentSrv.transformToSegments(true));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDimensionsForMetric() {\n      if (this.target.target) {\n        console.log(\"have a target, getting applicable dimensions\");\n\n        return this.datasource.metricFindDimensions(this.target)\n          .then(this.uiSegmentSrv.transformToSegments(true));\n      }\n    }\n\n    getDimensionValues(tag) {\n      if (tag) {\n        console.log(\"have a dimension, getting available values\");\n        return this.datasource.dimensionFindValues(this.target,tag)\n          .then(this.uiSegmentSrv.transformToSegments(true));\n      }\n    }\n\n    onChangeInternal() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n\n    toggleRawQuery() {\n        this.target.rawQueryInput = !this.target.rawQueryInput;\n        this.panelCtrl.refresh();\n    }\n\n    removeTag(tag) {\n        if (this.target.tags) {\n            this.target.tags.splice(this.target.tags.indexOf(tag), 1);\n            this.panelCtrl.refresh();\n        }\n    }\n\n    addTag() {\n        if (!this.target.tags) {\n            this.target.tags = [];\n        }\n        this.target.tags.push({\n            name: null,\n            value: null,\n            notCondition: this.scope.atlas.notCondition[0],\n            logical: this.scope.atlas.logical[0],\n            matcher: this.scope.atlas.matchers[0]\n        });\n    }\n\n    removeGroupBy(groupBy) {\n        if (this.target.groupBys) {\n            this.target.groupBys.splice(this.target.groupBys.indexOf(groupBy), 1);\n        }\n    }\n\n    addGroupBy() {\n        if (!this.target.groupBys) {\n            this.target.groupBys = [];\n        }\n        this.target.groupBys.push({});\n    }\n}\n\nAtlasDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}