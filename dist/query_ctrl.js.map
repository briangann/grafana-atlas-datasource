{"version":3,"sources":["../src/query_ctrl.js"],"names":["angular","_","QueryCtrl","AtlasDatasourceQueryCtrl","$scope","$injector","templateSrv","uiSegmentSrv","scope","target","atlas","aggregations","logical","notCondition","matchers","datasource","metricFind","then","transformToSegments","console","log","metricFindDimensions","tag","dimensionFindValues","panelCtrl","refresh","rawQueryInput","tags","splice","indexOf","push","name","value","matcher","groupBy","groupBys","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class AtlasDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.templateSrv = templateSrv;\n        this.target.target = this.target.target || 'select metric';\n        this.scope.atlas = {};\n        this.scope.atlas.aggregations = [\n            \"sum\",\n            \"avg\",\n            \"count\",\n            \"max\",\n            \"min\",\n            \"cf-avg\",\n            \"cf-max\",\n            \"cf-min\",\n            \"cf-sum\"\n        ];\n        this.scope.atlas.logical = [\n            \"and\",\n            \"or\"\n        ];\n        this.scope.atlas.notCondition = [\n            \" \",\n            \"not\"\n        ];\n        this.scope.atlas.matchers = [\n            \"eq\",\n            \"ge\",\n            \"gt\",\n            \"le\",\n            \"lt\",\n            \"has\",\n            \"in\",\n            \"re\",\n            \"reic\"\n        ];\n    }\n\n    getOptions() {\n        return this.datasource.metricFind(this.target)\n            .then(this.uiSegmentSrv.transformToSegments(true));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDimensionsForMetric() {\n      if (this.target.target) {\n        console.log(\"have a target, getting applicable dimensions\");\n\n        return this.datasource.metricFindDimensions(this.target)\n          .then(this.uiSegmentSrv.transformToSegments(true));\n      }\n    }\n\n    getDimensionValues(tag) {\n      if (tag) {\n        console.log(\"have a dimension, getting available values\");\n        return this.datasource.dimensionFindValues(this.target,tag)\n          .then(this.uiSegmentSrv.transformToSegments(true));\n      }\n    }\n\n    onChangeInternal() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n\n    toggleRawQuery() {\n        this.target.rawQueryInput = !this.target.rawQueryInput;\n        this.panelCtrl.refresh();\n    }\n\n    removeTag(tag) {\n        if (this.target.tags) {\n            this.target.tags.splice(this.target.tags.indexOf(tag), 1);\n            this.panelCtrl.refresh();\n        }\n    }\n\n    addTag() {\n        if (!this.target.tags) {\n            this.target.tags = [];\n        }\n        this.target.tags.push({\n            name: null,\n            value: null,\n            notCondition: this.scope.atlas.notCondition[0],\n            logical: this.scope.atlas.logical[0],\n            matcher: this.scope.atlas.matchers[0]\n        });\n    }\n\n    removeGroupBy(groupBy) {\n        if (this.target.groupBys) {\n            this.target.groupBys.splice(this.target.groupBys.indexOf(groupBy), 1);\n        }\n    }\n\n    addGroupBy() {\n        if (!this.target.groupBys) {\n            this.target.groupBys = [];\n        }\n        this.target.groupBys.push({});\n    }\n}\n\nAtlasDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}